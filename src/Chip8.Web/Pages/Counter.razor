@page "/counter"
@using Aptacode.BlazorCanvas
@using Chip8
@using Chip8.Model
@using Chip8.Web.IO
@using System.Threading.Tasks.Dataflow
@inject IJSRuntime JsRuntime

<PageTitle>Counter</PageTitle>

<h1>Chip8</h1>
<button @onclick="ToggleAudio">@audioText</button>
<div>
    <InputFile OnChange="SelectRom" class="btn-primary" />
    <select @onchange="LoadRom">
    @foreach (var entry in roms)
    {
    <option value="@entry.Value">@entry.Key</option>
    }
</select>
<button @onclick="Reset">Reset</button>
    <BlazorCanvas @ref="canvas">
        <canvas id="display" width="640" height="320"></canvas>
    </BlazorCanvas>
</div>

@code {
    BlazorCanvas canvas;
    SortedDictionary<string, string> roms = new SortedDictionary<string, string>
    {
        { "", "" },
        { "Breakout", "https://raw.githubusercontent.com/kripod/chip8-roms/master/games/Airplane.ch8" }
    };

    IVirtualMachine vm;
    Cassette cassette;
    Speaker speaker;
    Display display;
    Keyboard keyboard;
    bool hasAudio = false;
    string audioText = "Unmute";

    float lastTimestamp = 0;
    private async void ToggleAudio()
    {
        hasAudio = !hasAudio;
        audioText = hasAudio ? "Mute" : "Unmute";
        await JsRuntime.InvokeVoidAsync("toggleAudio", hasAudio);
    }

    private async Task LoadRom(ChangeEventArgs args)
    {
        string? rom = args.Value?.ToString();
        if (rom is not null)
        {
            await cassette.Change(rom);
            Reset();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        cassette = new();
        speaker = new(new ActionBlock<bool>(SetBuzzer));
        display = new(canvas, 640, 320);
        keyboard = new();

        Reset();

        await JsRuntime.InvokeAsync<object>("initEmulator", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void Cycle(float timeStamp)
    {
        if (!canvas.Ready)
        {
            return;
        }

        vm.Cycle(TimeSpan.FromMilliseconds(timeStamp));
    }

    [JSInvokable]
    public void HandleKeyDown(string key)
    {
        keyboard.HandleKeyDown(key);
    }

    [JSInvokable]
    public void HandleKeyUp(string key)
    {
        keyboard.HandleKeyUp(key);
    }

    public void Reset()
    {
        vm = VirtualMachine.Create(cassette, keyboard, display, speaker);
    }

    public async void SelectRom(InputFileChangeEventArgs e)
    {
        await cassette.Change(e.File.OpenReadStream());
        Reset();
    }

    private async Task SetBuzzer(bool on)
    {
        await JsRuntime.InvokeVoidAsync(on ? "playAudio" : "stopAudio");
    }
}
