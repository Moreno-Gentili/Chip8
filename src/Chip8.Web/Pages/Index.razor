@page "/"
@using Aptacode.BlazorCanvas
@using Chip8
@using Chip8.Model
@using Chip8.Web.IO
@using System.Threading.Tasks.Dataflow
@using Chip8.Web.Model;
@inject IJSRuntime JsRuntime

<PageTitle>CHIP-8 emulator on Blazor Web Assembly</PageTitle>
<h1>Chip-8</h1>
<h2>on Blazor WebAssembly</h2>

<header>
    <a href="https://github.com/Moreno-Gentili/Chip8" target="_blank" rel="noopener" class="github-link" style="text-decoration: none;"><p class="nes-balloon is-dark from-right">Fork me<br>on GitHub</p> <i class="nes-octocat"></i></a>
</header>

<section>
    <header>
        <InputFile OnChange="LoadRomFromFile" class="btn-primary" />
        <select @onchange="LoadRomFromHttp">
            @foreach (var entry in roms)
            {
                <option value="@entry.Value">@entry.Key</option>
            }
        </select>
        <input type="button" class="nes-btn is-error" @onclick="Reset" value="Reset" />
    </header>
    <main id="display">
        <div id="lcd">
            <BlazorCanvas @ref="canvas">
                <canvas width="@canvasWidth" height="@canvasHeight" hidden="@(displayType != DisplayType.Lcd)"></canvas>
            </BlazorCanvas>
        </div>
        <div id="crt" hidden="@(displayType != DisplayType.Crt)"></div>
    </main>

    <aside id="keyboard">
        <button>1</button>
        <button>2</button>
        <button>3</button>
        <button>4</button>
        <button>Q</button>
        <button>W</button>
        <button>E</button>
        <button>R</button>
        <button>A</button>
        <button>S</button>
        <button>D</button>
        <button>F</button>
        <button>Z</button>
        <button>X</button>
        <button>C</button>
        <button>V</button>
    </aside>

    <nav>
        <label>
            <input type="radio" class="nes-radio is-dark" name="answer-dark" checked value="@nameof(DisplayType.Crt)" @onchange="SetDisplay" />
            <span>@nameof(DisplayType.Crt)</span>
        </label>

        <label>
            <input type="radio" class="nes-radio is-dark" name="answer-dark" value="@nameof(DisplayType.Lcd)" @onchange="SetDisplay" />
            <span>@nameof(DisplayType.Lcd)</span>
        </label>
        <button @onclick="ToggleAudio">@audioText</button>
    </nav>
</section>

@if (state != null)
{
    <footer id="debug">
        <dl>
            <dt title="Register I (16 bit)">I</dt>
            <dd>@state["I"]</dd>
            <dt title="Program Counter (16 bit)">PC</dt>
            <dd>@state["PC"]</dd>
            <dt title="Sound Timer (8 bit)">ST</dt>
            <dd>@state["ST"]</dd>
            <dt title="Delay Timer (8 bit)">DT</dt>
            <dd>@state["DT"]</dd>
            <dt title="Stack Pointer (8 bit)">SP</dt>
            <dd>@state["SP"]</dd>
            <dt title="Stack (16 * 16 bit)">STACK</dt>
            <dd id="stack">@state["STACK"]</dd>
        </dl>

        <dl>
            <dt title="Register V0 (8 bit)">V0</dt>
            <dd>@state["V0"]</dd>
            <dt title="Register V1 (8 bit)">V1</dt>
            <dd>@state["V1"]</dd>
            <dt title="Register V2 (8 bit)">V2</dt>
            <dd>@state["V2"]</dd>
            <dt title="Register V3 (8 bit)">V3</dt>
            <dd>@state["V3"]</dd>
            <dt title="Register V4 (8 bit)">V4</dt>
            <dd>@state["V4"]</dd>
            <dt title="Register V5 (8 bit)">V5</dt>
            <dd>@state["V5"]</dd>
            <dt title="Register V6 (8 bit)">V6</dt>
            <dd>@state["V6"]</dd>
            <dt title="Register V7 (8 bit)">V7</dt>
            <dd>@state["V7"]</dd>
            <dt title="Register V8 (8 bit)">V8</dt>
            <dd>@state["V8"]</dd>
            <dt title="Register V9 (8 bit)">V9</dt>
            <dd>@state["V9"]</dd>
            <dt title="Register VA (8 bit)">VA</dt>
            <dd>@state["VA"]</dd>
            <dt title="Register VB (8 bit)">VB</dt>
            <dd>@state["VB"]</dd>
            <dt title="Register VC (8 bit)">VC</dt>
            <dd>@state["VC"]</dd>
            <dt title="Register VD (8 bit)">VD</dt>
            <dd>@state["VD"]</dd>
            <dt title="Register VE (8 bit)">VE</dt>
            <dd>@state["VE"]</dd>
            <dt title="Register VF (8 bit)">VF</dt>
            <dd>@state["VF"]</dd>
        </dl>
    </footer>
}

<dialog class="nes-dialog is-dark is-rounded" id="error">
    <form method="dialog">
        <p class="title">Error</p>
        <p>@errorText</p>
        <menu class="dialog-menu">
            <button class="nes-btn is-primary">OK</button>
        </menu>
    </form>
</dialog>

@code {
    BlazorCanvas canvas;
    SortedDictionary<string, string> roms = new SortedDictionary<string, string>
    {
        { "", "" },
        { "Breakout", "https://raw.githubusercontent.com/kripod/chip8-roms/master/games/Airplane.ch8" }
    };

    IVirtualMachine vm;
    Cassette cassette;
    Speaker speaker;
    Display display;
    Keyboard keyboard;
    DisplayType displayType = DisplayType.Crt;
    bool hasAudio = false;
    string audioText = "Unmute";
    float lastTimestamp = 0;
    bool faulted = false;
    string errorText = string.Empty;
    const int canvasWidth = 640;
    const int canvasHeight = 320;

    Dictionary<string, string?>? state = null;

    private async void ToggleAudio()
    {
        hasAudio = !hasAudio;
        audioText = hasAudio ? "Mute" : "Unmute";
        await JsRuntime.InvokeVoidAsync("toggleAudio", hasAudio);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        cassette = new();
        speaker = new(new ActionBlock<bool>(SetBuzzer));
        keyboard = new();
        display = new(canvas, canvasWidth, canvasHeight);
        display.Connect(displayType);

        await Reset();
        await JsRuntime.InvokeAsync<object>("initEmulator", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async void Update(float timeStamp)
    {
        if (!canvas.Ready || faulted)
        {
            return;
        }

        try
        {
            vm.Update(TimeSpan.FromMilliseconds(timeStamp));
            state = vm.GetState();
            StateHasChanged();
        }
        catch (Exception)
        {
            faulted = true;
            await ShowError("Runtime error: ROM is not valid");
        }
    }

    [JSInvokable]
    public void HandleKeyDown(string key)
    {
        keyboard.HandleKeyDown(key);
    }

    [JSInvokable]
    public void HandleKeyUp(string key)
    {
        keyboard.HandleKeyUp(key);
    }

    public async Task Reset()
    {
        try
        {
            vm = VirtualMachine.Create(cassette, keyboard, display, speaker);
            await SetBuzzer(false);
            faulted = false;
        }
        catch
        {
            faulted = true;
            await ShowError("Loading error: this is not a valid ROM");
        }
    }

    private async void LoadRomFromFile(InputFileChangeEventArgs e)
    {
        try
        {
            await cassette.Change(e.File.OpenReadStream());
            await Reset();
        }
        catch (Exception exc)
        {
            await ShowError($"Loading error: {exc.Message}");
        }
    }

    private async void LoadRomFromHttp(ChangeEventArgs args)
    {
        string? rom = args.Value?.ToString();
        if (rom is not null)
        {
            try
            {
                await cassette.Change(rom);
                await Reset();
            }
            catch (Exception exc)
            {
                await ShowError($"Loading error: {exc.Message}");
            }
        }
    }


    private void SetDisplay(ChangeEventArgs args)
    {
        displayType = Enum.Parse<DisplayType>(args.Value?.ToString() ?? string.Empty);
        display.Connect(displayType);
    }

    private async Task SetBuzzer(bool on)
    {
        await JsRuntime.InvokeVoidAsync(on ? "playAudio" : "stopAudio");
    }

    private async Task ShowError(string text)
    {
        errorText = text;
        await JsRuntime.InvokeVoidAsync("showError");
    }
}
