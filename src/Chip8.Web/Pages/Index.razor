@page "/"
@using Aptacode.BlazorCanvas
@using Chip8
@using Chip8.Model
@using Chip8.Model.IO;
@using Chip8.Web.IO
@using System.Threading.Tasks.Dataflow
@using Chip8.Web.Model;
@using System.Text;
@inject IJSRuntime JsRuntime
@inject HttpClient http

<PageTitle>CHIP-8 emulator on Blazor Web Assembly</PageTitle>
<h1>Chip-8</h1>
<h2>on Blazor WebAssembly</h2>

<header>
    <a href="https://github.com/Moreno-Gentili/Chip8" target="_blank" rel="noopener" class="github-link" style="text-decoration: none;"><p class="nes-balloon is-dark from-right">Fork me<br>on GitHub</p> <i class="nes-octocat"></i></a>
</header>

<main>
    <header id="selector">
        <InputFile @ref="fileSelector" OnChange="LoadRomFromDisk" class="btn-primary" accept=".rom,.ch8" hidden />
        <div class="nes-select is-dark">
            <select @ref="romSelector" @onchange="LoadRom">
                <option value="">Load from cassette...</option>
                @if (diskRomPath is not null)
                {
                    <option value="." selected>@diskRomPath</option>
                }
                @foreach (var romGroup in roms.GroupBy(r => r.Group))
                {
                    <optgroup label="@romGroup.Key">
                        @foreach (var rom in romGroup)
                        {
                            <option value="@rom.Crc32" selected="@(rom.Crc32 == defaultSelectedRom)">@GetRomFullName(rom)</option>
                        }
                    </optgroup>
                }
            </select>
        </div>
        <button type="button" class="nes-btn is-error" @onclick="Reset">Reset</button>
    </header>
    <section @ref="emulator" id="emulator">
        <article id="display" @onclick="@ShowHelp">
            <div id="lcd">
                <BlazorCanvas @ref="canvas">
                    <canvas width="@canvasWidth" height="@canvasHeight" hidden="@(displayType != DisplayType.Lcd)"></canvas>
                </BlazorCanvas>
            </div>
            <div id="crt" hidden="@(displayType != DisplayType.Crt)"></div>
        </article>

        @if (keyboard is not null)
        {
            <aside id="keyboard">
                <Help Open="@helpOpen" />
                @foreach (var entry in keyboard.Keys)
                {
                    <button type="button" data-key="@entry.Key" class="@GetKeyboardButtonClassName(entry.Value)" @onmousedown="() => keyboard.HandleKeyDown(entry.Value)" @onmouseup="() => keyboard.HandleKeyUp(entry.Value)">@entry.Key<span class="alt-key" data-key="@GetKeyboardAltKey(entry.Value)">@GetKeyboardAltKey(entry.Value)</span></button>
                }
            </aside>
        }
    </section>

    <nav id="options">
        <span id="display-option">
        <img src="images/display.png" alt="Display" />
        <label>
            <input type="radio" name="display-selection" class="nes-radio is-dark" checked value="@nameof(DisplayType.Crt)" @onchange="SetDisplay" />
            <span>@nameof(DisplayType.Crt)</span>
        </label>

        <label>
                <input type="radio" name="display-selection" class="nes-radio is-dark" value="@nameof(DisplayType.Lcd)" @onchange="SetDisplay" />
            <span>@nameof(DisplayType.Lcd)</span>
        </label>
        </span>

        <span id="audio-option">
            <img src="images/audio.png" alt="Audio" />
            <label>
                <input type="radio" name="audio-selection" class="nes-radio is-dark" checked value="0" @onchange="SetAudio" />
                <span>Off</span>
            </label>

            <label>
                <input type="radio" name="audio-selection" class="nes-radio is-dark" value="1" @onchange="SetAudio" />
                <span>On</span>
            </label>
        </span>

        <span id="fullscreen-option">
            <button type="button" title="Play in fullscreen" @onclick="SetFullscreen">
                <img src="images/fullscreen.png" alt="Fullscreen" />
            </button>
        </span>
    </nav>
</main>

@if (state is not null && cassette is not null && cassette.Crc32 is not null)
{
    <Debugger Crc32="@cassette.Crc32" Fps="@Convert.ToInt32(Math.Round(fps.Average()))" State="@state" Vm="@vm" @bind-ShouldStep="shouldStep" />
}

<dialog @ref="errorDialog" class="nes-dialog is-dark is-rounded">
    <form method="dialog">
        <p class="title">Error</p>
        <p>@errorText</p>
        <menu class="dialog-menu">
            <button class="nes-btn is-success">Close</button>
        </menu>
    </form>
</dialog>

<div id="drop" class="nes-container is-rounded is-dark">
    <p>Drop your ROM file here</p>
</div>

@code {
    const int canvasWidth = 640;
    const int canvasHeight = 320;
    BlazorCanvas? canvas;
    InputFile? fileSelector;
    ElementReference? romSelector;
    ElementReference? errorDialog;
    ElementReference? emulator;
    Dictionary<char, Key>? additionalKeyMap;
    Dictionary<Key, char>? reverseAdditionalKeyMap;
    bool? shouldStep = null;
    string? diskRomPath = null;
    List<float> fps = new();
    float lastUpdate = 0;
    string? defaultSelectedRom;
    bool helpOpen = false;

    Rom[] roms = new Rom[0];

    VirtualMachine? vm;
    Cassette? cassette;
    Speaker? speaker;
    Display? display;
    Keyboard? keyboard;
    DisplayType displayType = DisplayType.Crt;
    TimeSpan lastTimestamp = TimeSpan.Zero;
    bool faulted = false;
    string errorText = string.Empty;

    Dictionary<string, string?>? state = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (canvas is null)
        {
            await ShowError("Canvas is not inizialized");
            return;
        }

        roms = await GetRoms();

        cassette = new();
        speaker = new(new ActionBlock<bool>(SetBuzzer));
        keyboard = new();
        display = new(canvas, canvasWidth, canvasHeight);
        display.Connect(displayType);

        await JsRuntime.InvokeAsync<object>("initEmulator", DotNetObjectReference.Create(this));
        await Reset();
        await LoadDefaultRom();
        await FocusPage();
    }

    [JSInvokable]
    public async void Update(float timeStamp)
    {
        if (canvas?.Ready != true || vm is null || faulted)
        {
            return;
        }

        UpdateFps(timeStamp);

        try
        {
            TimeSpan? time = GetTime(timeStamp, shouldStep, lastTimestamp, vm.CpuInstructionsPerSecond);
            if (time is null)
            {
                return;
            }

            lastTimestamp = time.Value;
            vm.Update(time.Value);
            state = vm.GetState();

            if (shouldStep == true)
            {
                shouldStep = false;
            }

            StateHasChanged();
        }
        catch (Exception)
        {
            faulted = true;
            await ShowError("Runtime error: ROM is not valid");
        }
    }

    [JSInvokable]
    public async void HandleFile(string name, byte[] content)
    {
        using MemoryStream ms = new MemoryStream(content);
        await LoadRomFromDisk(name, ms);
    }

    [JSInvokable]
    public void HandleKeyDown(string key)
    {
        keyboard?.HandleKeyDown(key[0], additionalKeyMap);
    }

    [JSInvokable]
    public void HandleKeyUp(string key)
    {
        keyboard?.HandleKeyUp(key[0], additionalKeyMap);
    }

    private async Task FocusPage()
    {
        await JsRuntime.InvokeVoidAsync("focusMainButton");
    }

    private async Task Reset()
    {
        if (cassette is null || keyboard is null || display is null || speaker is null)
        {
            await ShowError("IO devices not initialized");
            return;
        }

        try
        {
            vm = (VirtualMachine)VirtualMachine.Create(cassette, keyboard, display, speaker);
            await SetBuzzer(false);
            faulted = false;
            await JsRuntime.InvokeVoidAsync("clearCanvas");
        }
        catch
        {
            faulted = true;
            await ShowError("Loading error: this is not a valid ROM");
        }
    }

    private async Task<Rom[]> GetRoms()
    {
        try
        {
            KnownRoms knownRoms = await http.GetFromJsonAsync<KnownRoms>("data/known-roms.json") ?? throw new InvalidOperationException("Invalid rom data");
            defaultSelectedRom = knownRoms.Selected;
            return knownRoms.Roms;
        }
        catch (Exception exc)
        {
            await ShowError(exc.Message);
            return new Rom[0];
        }
    }

    private async Task LoadDefaultRom()
    {
        if (defaultSelectedRom is null)
        {
            return;
        }

        Rom? defaultRom = roms.FirstOrDefault(r => r.Crc32 == defaultSelectedRom);
        if (defaultRom is not null)
        {
            await LoadRomFromHttp(defaultRom);
        }
    }

    private async Task LoadRomFromHttp(Rom rom)
    {
        if (cassette is null)
        {
            await ShowError("Cassette is not ready");
            return;
        }

        try
        {
            await cassette.Change(rom.Url);
            await Reset();
            SetIps(rom.Ips);
            SetKeyMap(rom);
        }
        catch (Exception exc)
        {
            await ShowError($"Loading error: {exc.Message}");
        }
    }

    private async void LoadRomFromDisk(InputFileChangeEventArgs e)
    {
        Stream stream = e.File.OpenReadStream();
        await LoadRomFromDisk(e.File.Name, stream);
    }

    private async Task LoadRomFromDisk(string name, Stream stream)
    {
        if (cassette is null)
        {
            await ShowError("Cassette is not ready");
            return;
        }

        try
        {
            await cassette.Change(stream);
            await Reset();
            SetIps(null);
            diskRomPath = name;
            additionalKeyMap = null;
            reverseAdditionalKeyMap = null;
        }
        catch (Exception exc)
        {
            await ShowError($"Loading error: {exc.Message}");
        }
    }

    private async void LoadRom(ChangeEventArgs args)
    {
        Rom? rom = roms.SingleOrDefault(r => r.Crc32 == args.Value?.ToString());
        if (rom is not null)
        {
            diskRomPath = null;
            await LoadRomFromHttp(rom);
        }
        else if (cassette is not null)
        {
            diskRomPath = "<no cassette>";
            cassette.Eject();
            await Reset();
            await PromptFileSelection();
        }
    }

    private async Task PromptFileSelection()
    {
        await JsRuntime.InvokeVoidAsync("promptFileSelection", fileSelector?.Element);
    }

    private void SetIps(int? ips)
    {
        if (vm is null)
        {
            return;
        }

        if (ips is null)
        {
            vm.ResetCpuInstructionsPerSecond();
        }
        else
        {
            vm.CpuInstructionsPerSecond = ips.Value;
        }
    }

    private void SetKeyMap(Rom rom)
    {
        additionalKeyMap = rom.GetKeyMap();
        reverseAdditionalKeyMap = additionalKeyMap?.ToDictionary(entry => entry.Value, entry => entry.Key);
    }


    private static TimeSpan? GetTime(float timeStamp, bool? shouldStep, TimeSpan lastTimestamp, int cpuInstructionsPerSecond)
    {
        return shouldStep switch
        {
            null => TimeSpan.FromMilliseconds(timeStamp),
            true => lastTimestamp + TimeSpan.FromSeconds(1) / cpuInstructionsPerSecond,
            false => (TimeSpan?)null,
        };
    }

    private void UpdateFps(float timeStamp)
    {
        if (lastUpdate == 0)
        {
            lastUpdate = timeStamp;
            return;
        }

        fps.Add(1000 / (timeStamp - lastUpdate));
        if (fps.Count > 60)
        {
            fps.RemoveAt(0);
        }

        lastUpdate = timeStamp;
    }


    private void SetDisplay(ChangeEventArgs args)
    {
        if (display is null)
        {
            throw new InvalidOperationException("Display is not ready");
        }

        displayType = Enum.Parse<DisplayType>(args.Value?.ToString() ?? string.Empty);
        display.Connect(displayType);
    }

    private async void SetAudio(ChangeEventArgs args)
    {
        string audioFunctionName = args.Value?.Equals("0") == true ?
                                        "disableAudio" : "enableAudio";

        await JsRuntime.InvokeVoidAsync(audioFunctionName);
    }

    private async void SetFullscreen()
    {
        await JsRuntime.InvokeVoidAsync("setFullscreen", emulator);
    }

    private async Task SetBuzzer(bool on)
    {
        await JsRuntime.InvokeVoidAsync(on ? "playAudio" : "stopAudio");
    }

    private async Task ShowError(string text)
    {
        errorText = text;
        await JsRuntime.InvokeVoidAsync("showError", errorDialog);
    }

    private string GetKeyboardButtonClassName(Key key)
    {
        if (reverseAdditionalKeyMap is null || reverseAdditionalKeyMap.ContainsKey(key))
        {
            return "nes-btn";
        }
        else
        {
            return "nes-btn is-disabled";
        }
    }

    private string GetKeyboardAltKey(Key key)
    {
        if (reverseAdditionalKeyMap?.TryGetValue(key, out char value) == true)
        {
            return value.ToString();
        }

        return string.Empty;
    }

    private void ShowHelp()
    {
        if (!helpOpen)
        {
            helpOpen = true;
        }
    }


    private static string GetRomFullName(Rom rom)
    {
        StringBuilder name = new();
        name.Append(rom.Name);

        if (rom.Year is not null)
        {
            name.Append(" (");
            name.Append(rom.Year.ToString());
            name.Append(")");
        }

        if (rom.Author is not null)
        {
            name.Append(" by ");
            name.Append(rom.Author);
        }

        return name.ToString();
    }
}
